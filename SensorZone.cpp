#include "SensorZone.h"

SensorZone::SensorZone()
{
    AXLOG("Kh·ªüi t·∫°o m·∫∑c ƒë·ªãnh!");
    sensorBody = nullptr;
    for (auto* obj : objectsInZone)
    {
        obj = nullptr;
    }
}

SensorZone::~SensorZone()
{
    AXLOG("H·ªßy SensorZone!");
}

SensorZone::SensorZone(const ax::Size& size)
{
    this->setContentSize(size);
    sensorBody = ax::PhysicsBody::createBox(size, ax::PhysicsMaterial(0, 0, 0));
    sensorBody->setDynamic(false);
    sensorBody->setCategoryBitmask(0x04);           // G√°n lo·∫°i c·ªßa v√πng c·∫£m bi·∫øn
    sensorBody->setContactTestBitmask(0x01);  // Ki·ªÉm tra va ch·∫°m v·ªõi t·∫•t c·∫£
    sensorBody->setCollisionBitmask(0x00);          // Kh√¥ng va ch·∫°m v·∫≠t l√Ω

    // ƒê·∫∑t sensorBody l√† v√πng c·∫£m bi·∫øn
    sensorBody->setGravityEnable(false);
    sensorBody->setDynamic(false);
    this->setTag(static_cast<int>(TrapType::GenericTrap));  // ƒê√°nh d·∫•u b·∫´y t∆∞∆°ng ·ª©ng v·ªõi v√πng Sensor

    this->setPhysicsBody(sensorBody);
}

void SensorZone::onEnter(ax::Node* obj)
{
    if (objectsInZone.find(obj) == objectsInZone.end())
    {
        objectsInZone.insert(obj);
        AXLOG("ƒê√É V√ÄO v√πng sensor");
        std::cout << "üîµ " << obj->getName() << " ƒê√É V√ÄO v√πng sensor!\n";
    }
}

void SensorZone::onExit(ax:: Node* obj)
{
    if (objectsInZone.erase(obj))
    {
        AXLOG("ƒê√É R·ªúI KH·ªéI v√πng sensor");
        std::cout << "üî¥ " << obj->getName() << " ƒê√É R·ªúI KH·ªéI v√πng sensor!\n";
    }
}

void SensorZone::checkObjectsInZone()
{
    for (auto* obj : objectsInZone)
    {
        std::cout << "üü° " << obj->getName() << " ƒëang trong v√πng sensor.\n";
    }
}

void SensorZone::doAction()
{
    AXLOG("G√¢y ·∫£nh h∆∞·ªüng!");
}
