#include "CollisionHandler.h"

USING_NS_AX;

bool CollisionHandler::onContactBegin(ax::PhysicsContact& contact)
{
    auto bodyA = contact.getShapeA()->getBody();
    auto bodyB = contact.getShapeB()->getBody();

    // L·∫•y d·ªØ li·ªáu va ch·∫°m
    const ax::PhysicsContactData* contactData = contact.getContactData();
    if (!contactData)
        return false;

    AXLOG("C√≥ va ch·∫°m x·∫£y ra!");

    // 1. X·ª≠ l√Ω va ch·∫°m ƒë·ªëi v·ªõi 'v·∫≠t th·ªÉ c·ª©ng'

    // Ki·ªÉm tra n·∫øu Logo ch·∫°m T∆∞·ªùng
    if ((bodyA->getCategoryBitmask() == 0x01 && bodyB->getCategoryBitmask() == 0x03) ||
        (bodyA->getCategoryBitmask() == 0x03 && bodyB->getCategoryBitmask() == 0x01))
    {
        AXLOG("Logo ƒë√£ ch·∫°m T∆∞·ªùng!");
    }

    // Ki·ªÉm tra n·∫øu va ch·∫°m v·ªõi b·∫´y (CategoryBitmask = 0x02)
    Node* trapNode      = nullptr;
    Node* passiveNode   = nullptr;

    if (bodyA->getCategoryBitmask() == 0x02)
    {
        trapNode    = bodyA->getNode();
        passiveNode = bodyB->getNode();
    }
    else if (bodyB->getCategoryBitmask() == 0x02)
    {
        trapNode    = bodyB->getNode();
        passiveNode = bodyA->getNode();
    }

    if (trapNode && passiveNode)
    {
        // Vector ph√°p tuy·∫øn c·ªßa va ch·∫°m
        /*
            H∆∞·ªõng c·ªßa vector ph√°p tuy·∫øn (normal vector) trong m·ªôt va ch·∫°m v·∫≠t l√Ω
            lu√¥n h∆∞·ªõng ra kh·ªèi bodyA v√† tr·ªè v·ªÅ ph√≠a body
        B*/
        ax::Vec2 normal = contactData->normal;

        
        /*
                *   L·∫•y h∆∞·ªõng c·ªßa vector ph√°p tuy·∫øn (normal)

                        N·∫øu trapNode l√† bodyA, th√¨ normal ƒë√£ ƒë√∫ng h∆∞·ªõng.

                        N·∫øu trapNode l√† bodyB, th√¨ normal c·∫ßn ƒë·∫£o d·∫•u.

                    S·ª≠ d·ª•ng m·ªôt bi·∫øn Vec2 correctedNormal ƒë·ªÉ chu·∫©n h√≥a h∆∞·ªõng ph√°p tuy·∫øn.

                        N·∫øu trapNode l√† bodyA, correctedNormal = normal.

                        N·∫øu trapNode l√† bodyB, correctedNormal = -normal.
                */
       

        // Chu·∫©n h√≥a h∆∞·ªõng ph√°p tuy·∫øn d·ª±a tr√™n trapNode
        Vec2 correctedNormal = (trapNode == bodyA->getNode()) ? normal : -normal;

        auto trap = dynamic_cast<Trap*>(trapNode);
        if (trap)
        {
            switch (trap->getTag())
            {
            case (static_cast<int>(TrapType::Spike)):
                static_cast<Spike*>(trap)->dealDamage(passiveNode);
                break;
            case (static_cast<int>(TrapType::Trampoline)):
            {
                // L·∫•y g√≥c xoay c·ªßa Trampoline
                float rotation = static_cast<Trampoline*>(trap)->getRotation();

                bool isValidCollision = false;

                if (rotation == 0.0f)
                {
                    // ƒê·ª©ng th·∫≥ng, ch·ªâ ch·∫•p nh·∫≠n va ch·∫°m t·ª´ tr√™n xu·ªëng
                    isValidCollision = (correctedNormal.y > 0.98f);
                }
                else if (rotation == -90.0f)
                {
                    // Xoay tr√°i 90¬∞, ch·ªâ ch·∫•p nh·∫≠n va ch·∫°m t·ª´ b√™n ph·∫£i
                    isValidCollision = (correctedNormal.x < -0.98f);
                }
                else if (rotation == 90.0f)
                {
                    // Xoay ph·∫£i 90¬∞, ch·ªâ ch·∫•p nh·∫≠n va ch·∫°m t·ª´ b√™n tr√°i
                    isValidCollision = (correctedNormal.x > 0.98f);
                }

                if (isValidCollision)
                {
                    AXLOG("üü¢ K√≠ch ho·∫°t Trampoline!");
                    static_cast<Trampoline*>(trap)->activateTrap();
                    static_cast<Trampoline*>(trap)->dealDamage(passiveNode);
                }
            }
                break;
            case (static_cast<int>(TrapType::Fire)):
            {
                if (correctedNormal.y > 0.98f)
                {
                    AXLOG("üî• Va ch·∫°m t·∫°i M·∫∂T TR√äN c·ªßa b·∫´y Fire!");
                    static_cast<Fire*>(trap)->activateTrap();
                    static_cast<Fire*>(trap)->dealDamage(passiveNode);
                }
            }
                break;
            case (static_cast<int>(TrapType::Fan)):
                static_cast<Fan*>(trap)->activateTrap();
                static_cast<Fan*>(trap)->dealDamage(passiveNode);
                break;
            default:
                trap->dealDamage(passiveNode);
                break;
            }
        }
    }

    return true;
}

bool CollisionHandler::onContactPreSolve(ax::PhysicsContact& contact, ax::PhysicsContactPreSolve& solve)
{
    auto bodyA = contact.getShapeA()->getBody();
    auto bodyB = contact.getShapeB()->getBody();

    // Ki·ªÉm tra n·∫øu va ch·∫°m v·ªõi b·∫´y (CategoryBitmask = 0x02)
    Node* trapNode    = nullptr;
    Node* passiveNode = nullptr;

    if (bodyA->getCategoryBitmask() == 0x02)
    {
        trapNode    = bodyA->getNode();
        passiveNode = bodyB->getNode();
    }
    else if (bodyB->getCategoryBitmask() == 0x02)
    {
        trapNode    = bodyB->getNode();
        passiveNode = bodyA->getNode();
    }

    if (trapNode && passiveNode)
    {
        auto trap = dynamic_cast<Trap*>(trapNode);
        if (trap)
        {
            switch (trap->getTag())
            {
            case (static_cast<int>(TrapType::SandMudIce)):
                static_cast<SandMudIce*>(trap)->activateTrap();
                static_cast<SandMudIce*>(trap)->dealDamage(passiveNode);
                break;
            default:
                trap->dealDamage(passiveNode);
                break;
            }
        }
    }
    return true;
}

bool CollisionHandler::onSensorContactBegin(ax::PhysicsContact& contact)
{
    // AXLOG("Test SensorZone collisionHandler - IN");
    auto shapeA = contact.getShapeA();
    auto shapeB = contact.getShapeB();

    auto bodyA = shapeA->getBody();
    auto bodyB = shapeB->getBody();

    // 2. X·ª≠ l√Ω va ch·∫°m v·ªõi SensorZone (·ªü ƒë√¢y l√† WindZone c√≥ bitmask = 0x04 v√† tag = WindZone)
    Node* sensorZoneNode = nullptr;
    Node* otherNode      = nullptr;

    if (bodyA->getCategoryBitmask() == 0x04)
    {
        AXLOG("V·∫≠t ƒêI V√ÄO TRONG SensorZone");
        sensorZoneNode = bodyA->getNode();
        otherNode      = bodyB->getNode();
        /*AXLOG("SensorZone's tag: %d", sensorZoneNode->getTag());
        AXLOG("sensorNodeZone: %p", sensorZoneNode);
        AXLOG("otherNode: %p", otherNode);*/
    }
    else if (bodyB->getCategoryBitmask() == 0x04)
    {
        AXLOG("V·∫≠t ƒêI V√ÄO TRONG SensorZone");
        sensorZoneNode = bodyB->getNode();
        otherNode      = bodyA->getNode();
        /*AXLOG("SensorZone's tag: %d", sensorZoneNode->getTag());
        AXLOG("sensorNodeZone: %p", sensorZoneNode);
        AXLOG("otherNode: %p", otherNode);*/
    }
    /*else if (bodyA->getCategoryBitmask() != 0x04 && bodyB->getCategoryBitmask() != 0x04)
        return false;*/

    //
    if (sensorZoneNode && otherNode)
    {
        // AXLOG("%d", sensorZoneNode->getTag() == static_cast<int>(TrapType::WindZone));
        if (sensorZoneNode->getTag() == static_cast<int>(TrapType::WindZone))
        {
            AXLOG("V·∫≠t th·ªÉ ƒëi v√†o trong windZone");
            auto windZone = dynamic_cast<WindZone*>(sensorZoneNode);
            if (!windZone)
            {
                AXLOG("‚ùå Kh√¥ng th·ªÉ √©p ki·ªÉu sensorZoneNode th√†nh WindZone.");
            }
            else
            {
                AXLOG("‚úÖ ƒê√£ √©p ki·ªÉu th√†nh c√¥ng, g·ªçi onEnter v√† doAction");
                windZone->onEnter(otherNode);
                windZone->doActionToOne(otherNode);
            }
        }
    }
    /*else
        return false;*/

    return true;
}

bool CollisionHandler::onSensorContactSeparate(ax::PhysicsContact& contact)
{
    // AXLOG("Test SensorZone collisionHandler - OUT");
    auto shapeA = contact.getShapeA();
    auto shapeB = contact.getShapeB();

    auto bodyA = shapeA->getBody();
    auto bodyB = shapeB->getBody();

    // 2. X·ª≠ l√Ω va ch·∫°m v·ªõi SensorZone (·ªü ƒë√¢y l√† WindZone c√≥ bitmask = 0x04 v√† tag = WindZone)
    Node* sensorZoneNode = nullptr;
    Node* otherNode      = nullptr;

    if (bodyA->getCategoryBitmask() == 0x04)
    {
        AXLOG("V·∫≠t ƒêI RA KH·ªéI SensorZone");
        sensorZoneNode = bodyA->getNode();
        otherNode      = bodyB->getNode();
        /*AXLOG("SensorZone's tag: %d", sensorZoneNode->getTag());
        AXLOG("sensorNodeZone: %p", sensorZoneNode);
        AXLOG("otherNode: %p", otherNode);*/
    }
    else if (bodyB->getCategoryBitmask() == 0x04)
    {
        AXLOG("V·∫≠t ƒêI RA KH·ªéI SensorZone");
        sensorZoneNode = bodyB->getNode();
        otherNode      = bodyA->getNode();
        /*AXLOG("SensorZone's tag: %d", sensorZoneNode->getTag());
        AXLOG("sensorNodeZone: %p", sensorZoneNode);
        AXLOG("otherNode: %p", otherNode);*/
    }
    /*else if (bodyA->getCategoryBitmask() != 0x04 && bodyB->getCategoryBitmask() != 0x04)
        return false;*/

    if (sensorZoneNode && otherNode)
    {
        //AXLOG("%d", sensorZoneNode->getTag() == static_cast<int>(TrapType::WindZone));
        if (sensorZoneNode->getTag() == static_cast<int>(TrapType::WindZone))
        {
            AXLOG("V·∫≠t th·ªÉ ƒëi ra kh·ªèi windZone");
            auto windZone = dynamic_cast<WindZone*>(sensorZoneNode);
            if (!windZone)
            {
                AXLOG("‚ùå Kh√¥ng th·ªÉ √©p ki·ªÉu sensorZoneNode th√†nh WindZone.");
            }
            else
            {
                AXLOG("‚úÖ ƒê√£ √©p ki·ªÉu th√†nh c√¥ng, g·ªçi onExit v√† doAction");
                windZone->onExit(otherNode);
            }
        }
    }
    else
        return false;

    return true;
}
